@page "/"
@using Microsoft.Identity.Web
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<PageTitle>Index</PageTitle>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex flex-col items-center justify-center">
        <h2>@user.DisplayName</h2>
        <h2>@user.Mail</h2>
    </div>
}

@if (todoTaskList is not null)
{
    <div class="flex flex-col justify-center mt-5">
        @foreach (var todo in todoTaskList)
        {
            <h2>@todo.DisplayName</h2>

            if(todo.Tasks is not null){
                foreach(var task in todo.Tasks){
                    <h3>@task.Title</h3>
                    <h3>@task.Status</h3>
                }
            }
        }
    </div>
}

@code {
    User? user;
    ITodoListsCollectionPage? todoTaskList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
            todoTaskList = await GraphServiceClient.Me.Todo.Lists.Request().GetAsync();
            foreach (var item in todoTaskList)
            {
                var tasks = await GraphServiceClient.Me
                .Todo
                .Lists[item.Id]
                .Tasks
                .Request()
                .GetAsync();
                tasks.ToList();
                item.Tasks = tasks;
            }
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    @* public IList<TodoTask>? FetchTasks(string todoId){
var tasks = GraphServiceClient.Me
.Todo
.Lists[todoId]
.Tasks
.Request()
.GetAsync();

return tasks.GetAwaiter().GetResult().CurrentPage;
} *@
}