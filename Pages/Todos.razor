@page "/todos"
@using Microsoft.Identity.Web
@using Microsoft.Graph
@using BlazorSample.Components
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<div class="bg-blue-300 flex flex-grow flex-row">

    <div class="bg-gray-900 text-white flex flex-col gap-1 w-[300px]">
        @if (todoTaskList is not null)
        {
            @foreach (var todo in todoTaskList)
            {
                <div class="@GetColor(todo.Id) flex gap-3 hover:bg-gray-700 hover:cursor-pointer py-2 px-2"
             @onclick="() => FetchTasks(todo)">
                    <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3.5 16.5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4 .5h13.503a1 1 0 0 1 .117 1.993l-.117.007H7.5a1 1 0 0 1-.116-1.993L7.5 17h13.503H7.5Zm-4-6.5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4 .5h13.503a1 1 0 0 1 .117 1.993l-.117.007H7.5a1 1 0 0 1-.116-1.993L7.5 11h13.503H7.5Zm-4-6.492a1.5 1.5 0 1 1 0 2.999 1.5 1.5 0 0 1 0-3ZM7.5 5h13.503a1 1 0 0 1 .117 1.993l-.117.007H7.5a1 1 0 0 1-.116-1.994l.116-.006h13.503H7.5Z"
                              fill="#ffffff" />
                    </svg>
                    <h2 class="truncate">@todo.DisplayName</h2>
                </div>

            }
        }
        else
        {
            <div class="text-center mx-auto my-auto font-bold text-3xl">
                <p>Loading</p>
            </div>
        }
    </div>

    <div class="flex flex-col flex-grow bg-gray-800 px-10 py-7 text-white gap-10">
        @if (selectedTodoTaskList is not null)
        {
            <h1 class="text-4xl text-blue-400">@selectedTodoTaskList.DisplayName</h1>
        }

        <div class="flex flex-col flex-grow gap-1 overflow-y-scroll h-[400px]">
            @if (todoTasks is not null)
            {
                @foreach (var task in todoTasks.Where(t => t.Status != Microsoft.Graph.TaskStatus.Completed))
                {
                    <div class="bg-gray-900 rounded-md p-3 flex gap-3 items-center">
                        <div>
                            @if (task.Status == Microsoft.Graph.TaskStatus.Completed)
                            {
                                <svg width="20" height="20" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2Zm3.22 6.97-4.47 4.47-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5a.75.75 0 1 0-1.06-1.06Z" fill="#ffffff" /></svg>
                            }
                            else
                            {
                                <svg width="20" height="20" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 3.5a8.5 8.5 0 1 0 0 17 8.5 8.5 0 0 0 0-17ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Z"
                                          fill="#ffffff" />
                                </svg>
                            }
                        </div>
                        <h1 class="">@task.Title</h1>
                    </div>
                }
                <div @onclick="() => ShowCompleted = !ShowCompleted">
                    <CompletedButton Status="@ShowCompleted" TodoTasks="todoTasks"></CompletedButton>
                </div>
                @if (ShowCompleted)
                {

                    @foreach (var task in todoTasks.Where(t => t.Status == Microsoft.Graph.TaskStatus.Completed))
                    {
                        <div class="bg-gray-900 rounded-md p-3 flex gap-3 items-center">
                            <div>
                                @if (task.Status == Microsoft.Graph.TaskStatus.Completed)
                                {
                                    <svg width="20" height="20" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2Zm3.22 6.97-4.47 4.47-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5a.75.75 0 1 0-1.06-1.06Z" fill="#ffffff" /></svg>
                                }
                                else
                                {
                                    <svg width="20" height="20" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 3.5a8.5 8.5 0 1 0 0 17 8.5 8.5 0 0 0 0-17ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Z"
                                              fill="#ffffff" />
                                    </svg>
                                }
                            </div>
                            <h1 class="line-through">@task.Title</h1>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    ITodoListsCollectionPage? todoTaskList;
    TodoTaskList? selectedTodoTaskList;
    ITodoTaskListTasksCollectionPage? todoTasks;
    public bool ShowCompleted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            todoTaskList = await GraphServiceClient.Me.Todo.Lists.Request().GetAsync();
            todoTasks = await GraphServiceClient.Me
            .Todo
            .Lists[todoTaskList.FirstOrDefault()?.Id]
            .Tasks
            .Request()
            .GetAsync();
            selectedTodoTaskList = todoTaskList.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private string GetColor(string id)
    {
        if (selectedTodoTaskList?.Id == id)
        {
            return "bg-gray-700";   
        }
        return "";
    }

    private async Task FetchTasks(TodoTaskList todoTaskList)
    {
        try
        {
            todoTasks = await GraphServiceClient.Me
            .Todo
            .Lists[todoTaskList.Id]
            .Tasks
            .Request()
            .GetAsync();
            selectedTodoTaskList = todoTaskList;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }
}
