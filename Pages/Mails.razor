@page "/mails"
@using Azure;
@using BlazorSample.Models;
@using Microsoft.Graph
@using BlazorSample.Components
@using Microsoft.Identity.Web;
@using System.Text.Json;
@using System.Text;
@using Azure.AI.TextAnalytics;
@using System.Text.RegularExpressions;
@using System.Net;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<PageTitle>Outlook Mails</PageTitle>

<style>
    p {
        margin: 0 !important;
        padding: 0 !important;
    }
</style>

<div class="h-full flex flex-col relative pt-10">

    <div class="flex gap-3 absolute top-0 z-10 bg-gray-800 shadow-md w-full h-10 py-1 px-3">
        <button class="text-white bg-blue-600 hover:bg-blue-700 flex items-center gap-3 px-2 rounded-md" @onclick="() => OpenSendEmailModal()">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M22 8.608v8.142a3.25 3.25 0 0 1-3.066 3.245L18.75 20H5.25a3.25 3.25 0 0 1-3.245-3.066L2 16.75V8.608l9.652 5.056a.75.75 0 0 0 .696 0L22 8.608ZM5.25 4h13.5a3.25 3.25 0 0 1 3.234 2.924L12 12.154l-9.984-5.23a3.25 3.25 0 0 1 3.048-2.919L5.25 4h13.5-13.5Z" fill="#ffffff" /></svg>
            New mail
        </button>
        <button class="text-white hover:bg-gray-900 flex items-center gap-3 px-2 py-2 rounded-md" @onclick="() => Delete(Message)">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M21.5 6a1 1 0 0 1-.883.993L20.5 7h-.845l-1.231 12.52A2.75 2.75 0 0 1 15.687 22H8.313a2.75 2.75 0 0 1-2.737-2.48L4.345 7H3.5a1 1 0 0 1 0-2h5a3.5 3.5 0 1 1 7 0h5a1 1 0 0 1 1 1Zm-7.25 3.25a.75.75 0 0 0-.743.648L13.5 10v7l.007.102a.75.75 0 0 0 1.486 0L15 17v-7l-.007-.102a.75.75 0 0 0-.743-.648Zm-4.5 0a.75.75 0 0 0-.743.648L9 10v7l.007.102a.75.75 0 0 0 1.486 0L10.5 17v-7l-.007-.102a.75.75 0 0 0-.743-.648ZM12 3.5A1.5 1.5 0 0 0 10.5 5h3A1.5 1.5 0 0 0 12 3.5Z" fill="#ffffff" /></svg>
            Delete
        </button>
        <button class="text-white hover:bg-gray-900 flex items-center gap-3 px-2 py-2 rounded-md">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M16.953 5.303a1 1 0 0 0-1.906-.606c-.124.389-.236.899-.324 1.344-.565.012-1.12 0-1.652-.038a1 1 0 1 0-.142 1.995c.46.032.934.048 1.416.047a25.649 25.649 0 0 0-.24 1.698c-1.263.716-2.142 1.684-2.636 2.7-.624 1.283-.7 2.857.239 3.883.675.736 1.704.758 2.499.588.322-.068.654-.176.988-.32a1 1 0 0 0 1.746-.93 13.17 13.17 0 0 0-.041-.115 8.404 8.404 0 0 0 2.735-4.06c.286.251.507.55.658.864.284.594.334 1.271.099 1.91-.234.633-.78 1.313-1.84 1.843a1 1 0 0 0 .895 1.789c1.44-.72 2.385-1.758 2.821-2.94a4.436 4.436 0 0 0-.17-3.464 4.752 4.752 0 0 0-2.104-2.165C19.998 9.22 20 9.11 20 9a1 1 0 0 0-1.974-.23 5.984 5.984 0 0 0-1.796.138c.047-.305.102-.626.166-.964a20.142 20.142 0 0 0 2.842-.473 1 1 0 0 0-.476-1.942c-.622.152-1.286.272-1.964.358.048-.208.1-.409.155-.584Zm-3.686 8.015c.166-.34.414-.697.758-1.037.02.348.053.67.098.973.083.56.207 1.048.341 1.477a3.41 3.41 0 0 1-.674.227c-.429.092-.588.019-.614.006l-.004-.001c-.162-.193-.329-.774.095-1.645Zm4.498-2.562a6.362 6.362 0 0 1-1.568 2.73 7.763 7.763 0 0 1-.095-.525 10.294 10.294 0 0 1-.088-1.904c.033-.013.067-.024.1-.036l1.651-.265Zm0 0-1.651.265c.602-.212 1.155-.29 1.651-.265ZM7.536 6.29a6.342 6.342 0 0 0-4.456.331 1 1 0 0 0 .848 1.811 4.342 4.342 0 0 1 3.049-.222c.364.107.568.248.69.37.12.123.203.27.257.454.067.225.087.446.09.69a8.195 8.195 0 0 0-.555-.117c-1.146-.199-2.733-.215-4.262.64-1.271.713-1.796 2.168-1.682 3.448.12 1.326.94 2.679 2.572 3.136 1.48.414 2.913-.045 3.877-.507l.08-.04a1 1 0 0 0 1.96-.281V10.5c0-.053.002-.12.005-.2.012-.417.034-1.16-.168-1.838a3.043 3.043 0 0 0-.755-1.29c-.394-.398-.91-.694-1.547-.881h-.003Zm-.419 5.288c.344.06.647.143.887.222v2.197a7.021 7.021 0 0 1-.905.524c-.792.38-1.682.605-2.473.384-.698-.195-1.06-.742-1.119-1.389-.062-.693.243-1.286.667-1.523.987-.553 2.06-.569 2.943-.415Z" fill="#ffffff" /></svg>
            Translate message to English
        </button>
        <button class="text-white hover:bg-gray-900 flex items-center gap-3 px-2 py-2 rounded-md" @onclick="() => LanguageAnalyze()">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M3 5.25A2.25 2.25 0 0 1 5.25 3h13.5A2.25 2.25 0 0 1 21 5.25v5.762a3.279 3.279 0 0 0-2.607.95L15.355 15H11.25a.75.75 0 1 0 0 1.5h2.605l-1.365 1.365a3.685 3.685 0 0 0-.97 1.712L11.166 21H5.25A2.25 2.25 0 0 1 3 18.75V5.25Zm4.75 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm3.5-1.75a.75.75 0 0 0 0 1.5h5.5a.75.75 0 0 0 0-1.5h-5.5Zm0 3.75a.75.75 0 1 0 0 1.5h5.5a.75.75 0 1 0 0-1.5h-5.5Zm-4.5.75a1 1 0 1 0 2 0 1 1 0 0 0-2 0Zm1 4.75a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm11.35-4.08-5.903 5.902a2.686 2.686 0 0 0-.706 1.247l-.458 1.831a1.087 1.087 0 0 0 1.319 1.318l1.83-.457a2.685 2.685 0 0 0 1.248-.707l5.902-5.902A2.286 2.286 0 0 0 19.1 12.67Z" fill="#ffffff" /></svg>
            <p>Summarize the email</p>
        </button>
        <button class="text-white hover:bg-gray-900 flex items-center gap-3 px-2 py-2 rounded-md">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M9.704 16.294a1 1 0 1 1-1.415 1.414l-4.997-5.004a1 1 0 0 1 0-1.413L8.29 6.293a1 1 0 0 1 1.415 1.414L6.41 11H13a8 8 0 0 1 7.996 7.75L21 19a1 1 0 1 1-2 0 6 6 0 0 0-5.775-5.996L13 13H6.414l3.29 3.294Z" fill="#ffffff" /></svg>
            <p>Reply</p>
        </button>
    </div>

    <div class="bg-red-500 text-white grid lg:grid-cols-2 md:grid-cols-2 sm:grid-cols:1 h-full">
        <div id="mails" class="bg-gray-700 flex flex-col overflow-y-auto gap-3 p-3">
            @if (Messages is not null)
            {
                @foreach (var message in Messages)
                {
                    <div @onclick="() => GetEmailContent(message)" class="@GetSelectedMailBgColor(message.Id) p-2 rounded-md border-b border-gray-700 hover:bg-gray-700 select-none text-white shadow-md">
                        <div class="flex items-center justify-between">
                            <h1 class="font-bold">@message.From.EmailAddress.Name</h1>
                            <h2>@message.CreatedDateTime.Value.ToString().Split(' ')[0]</h2>
                        </div>
                        <div class="flex items-center justify-between">
                            <h2>@message.Subject</h2>
                        </div>
                        <p class="font-thin" style="color: white !important">@message.BodyPreview<span>...</span></p>
                    </div>
                }
            }
        </div>

        <div id="mail" class="bg-gray-700 overflow-y-auto relative">
            @if (Message is not null)
            {
                <div class="flex gap-3 bg-gray-800 px-3 py-3 sticky top-0">
                    <h1 class="font-bold truncate">
                        @Message.Subject
                    </h1>
                    <h1 class="font-bold">
                        -
                    </h1>
                    <h1 class="font-bold">
                        @Message.ToRecipients.FirstOrDefault().EmailAddress.Name
                    </h1>
                </div>
                <MailContent Content="@Message.Body.Content"></MailContent>
            }
        </div>
    </div>
</div>

@if (Summary is not null && IsModalOpen && Message is not null)
{
    <SummaryModal Summary="@Summary" Message="@Message" OnClose="CloseModel"></SummaryModal>
}

@if (IsSummaryLoading)
{
    <LoadingModal></LoadingModal>
}

@if (IsSendEmailModalOpen)
{
    <SendEmailModal OnClose="CloseSendEmailModal" OnSend="SendEmail"></SendEmailModal>
}

@code {
    public IMessageDeltaCollectionPage? Messages { get; set; }
    public Message? Message { get; set; }
    public Message? SelectedMessage { get; set; }
    public Summary? Summary { get; set; }
    public bool IsModalOpen { get; set; } = false;
    public bool IsSummaryLoading { get; set; } = false;
    public bool IsSendEmailModalOpen { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        await GetEmails();
    }

    private async Task GetEmails()
    {
        var result = await GraphServiceClient.Me.MailFolders["Inbox"].Messages.Delta().Request().GetAsync();
        if (result is not null)
        {
            Messages = result;
        }
    }

    public async Task SendEmail()
    {
        try
        {
            var message = new Message()
            {
                Sender = new Recipient()
                {
                        EmailAddress = new EmailAddress()
                        {
                            Address = "aka.emre@hotmail.com",
                        }
                },
                    ToRecipients = new List<Recipient>()
                            {
                new Recipient()
                {
                    EmailAddress = new EmailAddress()
                    {
                        Address = "aka.emre@hotmail.com",
                    }
                }
            },
                    Subject = "Test mail",
                    Body = new ItemBody()
                    {
                        ContentType = BodyType.Text,
                        Content = "Test mail content aşko kuşkoo"
                    },

                };

            await GraphServiceClient.Me.SendMail(message, true).Request().PostAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }

        //CloseSendEmailModal();
    }

    public void CloseSendEmailModal()
    {
        IsSendEmailModalOpen = false;
    }

    public void OpenSendEmailModal()
    {
        IsSendEmailModalOpen = true;
    }

    private async Task GetEmailContent(Message message)
    {
        Console.WriteLine("EMAILLLL " + message.Id);
        SelectedMessage = message;
        var result = await GraphServiceClient.Me.MailFolders["Inbox"].Messages[message.Id].Request().GetAsync();
        if (result is not null)
        {
            Message = result;
        }
    }

    private async Task Delete(Message message)
    {
        var result = await GraphServiceClient.Me.MailFolders["Inbox"].Messages[message.Id].Request().DeleteResponseAsync();
        Console.WriteLine(result.StatusCode);
        if (result.StatusCode == HttpStatusCode.NoContent)
        {
            Message = null;
            await GetEmails();
        }
        StateHasChanged();
    }

    private string GetSelectedMailBgColor(string id)
    {
        if (SelectedMessage is not null)
        {
            if (SelectedMessage.Id == id)
            {
                return "bg-gray-600";
            }
            return "bg-gray-800";
        }
        return "bg-gray-800";
    }

    private async Task LanguageAnalyze()
    {
        Summary = new();
        string endpoint = Configuration["CognitiveService:Endpoint"]!;
        string location = Configuration["CognitiveService:Location"]!;
        string subscription = Configuration["CognitiveService:SubscriptionKey"]!;
        string apiKey = Configuration["CognitiveService:Key"]!;
        Uri endpointUri = new(endpoint);
        AzureKeyCredential credential = new(apiKey);
        TextAnalyticsClient client = new(endpointUri, credential);
        string document = ExtractTextFromHtml();
        try
        {
            IsSummaryLoading = true;
            Response<DetectedLanguage> response = await client.DetectLanguageAsync(document);
            DetectedLanguage language = response.Value;

            Summary.DetectedLanguage = language;

            Console.WriteLine($"Detected language is {language.Name} with a confidence score of {language.ConfidenceScore}.");

            await ExtractKeyPhrases(document, client);
            await SummarizeDocument(document, client);
            await AnalyzingSentiment(document, client);
            IsSummaryLoading = false;
            IsModalOpen = true;
        }
        catch (RequestFailedException exception)
        {
            Console.WriteLine($"Error Code: {exception.ErrorCode}");
            Console.WriteLine($"Message: {exception.Message}");
        }
    }

    private async Task ExtractKeyPhrases(string document, TextAnalyticsClient client)
    {
        try
        {
            Response<KeyPhraseCollection> response = await client.ExtractKeyPhrasesAsync(document);
            KeyPhraseCollection keyPhrases = response.Value;

            Summary.KeyPhraseCollection = keyPhrases;

            Console.WriteLine($"Extracted {keyPhrases.Count} key phrases:");
            foreach (string keyPhrase in keyPhrases)
            {
                Console.WriteLine($"  {keyPhrase}");
            }
        }
        catch (RequestFailedException exception)
        {
            Console.WriteLine($"Error Code: {exception.ErrorCode}");
            Console.WriteLine($"Message: {exception.Message}");
        }
    }

    private async Task SummarizeDocument(string document, TextAnalyticsClient client)
    {
        // Prepare the input of the text analysis operation. You can add multiple documents to this list and
        // perform the same operation on all of them simultaneously.
        List<string> batchedDocuments = new()
        {
            document
        };

        // Perform the text analysis operation.
        var operation = await client.StartExtractSummaryAsync(batchedDocuments);
        await operation.WaitForCompletionAsync();

        // View the operation status.
        Console.WriteLine($"Created On   : {operation.CreatedOn}");
        Console.WriteLine($"Expires On   : {operation.ExpiresOn}");
        Console.WriteLine($"Id           : {operation.Id}");
        Console.WriteLine($"Status       : {operation.Status}");
        Console.WriteLine($"Last Modified: {operation.LastModified}");
        Console.WriteLine();

        // View the operation results.
        await foreach (ExtractSummaryResultCollection documentsInPage in operation.Value)
        {
            Console.WriteLine($"Results of \"Extractive Summarization\" Model, version: \"{documentsInPage.ModelVersion}\"");
            Console.WriteLine();

            foreach (ExtractSummaryResult documentResult in documentsInPage)
            {
                if (documentResult.HasError)
                {
                    Console.WriteLine($"  Error!");
                    Console.WriteLine($"  Document error code: {documentResult.Error.ErrorCode}.");
                    Console.WriteLine($"  Message: {documentResult.Error.Message}");
                    continue;
                }

                Console.WriteLine($"  Extracted the following {documentResult.Sentences.Count} sentence(s):");
                Console.WriteLine();

                foreach (SummarySentence sentence in documentResult.Sentences)
                {
                    Summary.SummarySentence.Add(sentence);
                    Console.WriteLine($"  Sentence: {sentence.Text}");
                    Console.WriteLine($"  Rank Score: {sentence.RankScore}");
                    Console.WriteLine($"  Offset: {sentence.Offset}");
                    Console.WriteLine($"  Length: {sentence.Length}");
                    Console.WriteLine();
                }
            }
        }
    }

    private async Task AnalyzingSentiment(string document, TextAnalyticsClient client)
    {
        try
        {
            Response<DocumentSentiment> response = await client.AnalyzeSentimentAsync(document);
            DocumentSentiment docSentiment = response.Value;

            Summary.DocumentSentiment = docSentiment;

            Console.WriteLine($"Sentiment was {docSentiment.Sentiment}, with confidence scores: ");
            Console.WriteLine($"  Positive confidence score: {docSentiment.ConfidenceScores.Positive}.");
            Console.WriteLine($"  Neutral confidence score: {docSentiment.ConfidenceScores.Neutral}.");
            Console.WriteLine($"  Negative confidence score: {docSentiment.ConfidenceScores.Negative}.");
        }
        catch (RequestFailedException exception)
        {
            Console.WriteLine($"Error Code: {exception.ErrorCode}");
            Console.WriteLine($"Message: {exception.Message}");
        }
    }

    private string ExtractTextFromHtml()
    {
        if (Message is not null)
        {
            string myMarkup = Message.Body.Content;
            string decodedMarkup = WebUtility.HtmlDecode(myMarkup);
            string plainText = Regex.Replace(decodedMarkup, @"<[^>]*>", String.Empty);
            Console.WriteLine(plainText);
            return plainText;
        }
        throw new Exception("No message selected");
    }

    public void CloseModel()
    {
        IsModalOpen = false;
    }
}
